name: Test, Build and Push to ECR (Secure)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image'
        required: false
        default: ''

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: plusone-app
  RUBY_VERSION: '3.2.2'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: plusonedb_test
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-mysql-client

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          mysqladmin ping -hmysql -uroot --silent && break
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Setup database
      run: |
        bundle exec rails db:create RAILS_ENV=test
        bundle exec rails db:migrate RAILS_ENV=test
      env:
        RAILS_ENV: test
        DATABASE_TEST_HOST: mysql
        DATABASE_TEST_USER: root
        DATABASE_TEST_PASSWORD: ""

    - name: Run RSpec tests
      run: bundle exec rspec
      env:
        RAILS_ENV: test
        DATABASE_TEST_HOST: mysql 
        DATABASE_TEST_USER: root
        DATABASE_TEST_PASSWORD: ""

    - name: Run RuboCop
      run: bundle exec rubocop

    - name: Run Brakeman security check
      run: bundle exec brakeman --no-progress --format json --output brakeman-report.json
      continue-on-error: true

    - name: Upload Brakeman results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: brakeman-report
        path: brakeman-report.json

    - name: Debug DB env
      run: |
        echo "HOST=$DATABASE_TEST_HOST"
        echo "USER=$DATABASE_TEST_USER"
        echo "PWD =$DATABASE_TEST_PASSWORD"
      env:
        RAILS_ENV: test
        DATABASE_TEST_HOST: mysql
        DATABASE_TEST_USER: root
        DATABASE_TEST_PASSWORD: ""

  build-and-push:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        provenance: true
        sbom: true

    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

    - name: Output image URI
      run: |
        echo "âœ… Secure build completed successfully!"
        echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        echo "Latest tag: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
        echo "All tags: ${{ steps.meta.outputs.tags }}" 