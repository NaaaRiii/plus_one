<h1>Goal Title:</h1>
<h2><%= @goal.title %></h2>
<% if @goal.completed %>
  <p>このGoalは達成しました!</p>
<% else %>
  <div id="custom-confirm" data-goal-id="<%= @goal.id %>">
    <p>このGoalは達成しましたか?</p>
    <button id="confirm-yes">はい、達成しました！</button>
    <button id="confirm-no">いいえ、まだやるべきことがあります。</button>
  </div>
<% end %>

<h3>Goal Content:</h3><p><%= @goal.content %></p>

<p>Deadline: <%= @goal.deadline %></p>

<h2>Small Goals</h2>

<% @small_goals.each do |small_goal| %>
  <div data-small-goal-id="<%= small_goal.id %>" class="small-goal">
    <h3>Small Goal Title:</h3>
      <%= small_goal.title %>
      <% if small_goal.completed %>
        <span><strong>完了!</strong></span>
      <% else %>
        <!-- 新規に作成された small_goal にはまだ未完了のタスクが存在するはずなので、それに基づいてボタンの表示を制御します -->
        <div class="small-goal-complete-button" style="<%= 'display: none;' unless small_goal.tasks.any?(&:completed) %>">
          <%= button_to "完了", complete_goal_small_goal_path(goal_id: @goal.id, id: small_goal.id), method: :put, remote: true, class: "small-goal-complete-button" %>
        </div>
      <% end %>
    
    <p>Difficulty: <%= small_goal.difficulty %></p>
    <p>Deadline: <%= small_goal.deadline.strftime("%Y-%m-%d") %></p>
    <!-- タスクのリスト表示 -->
    <% unless small_goal.completed %>
      <ul>
        <% small_goal.tasks.each do |task| %>
          <li>
            <%= check_box_tag "tasks[#{task.id}][completed]", task.id, task.completed, class: "task-checkbox", data: { small_goal_id: small_goal.id } %>
            <%= task.content %>
          </li>
        <% end %>
      </ul>
    <% end %>
    <div>*******************</div>
  </div>
<% end %>


<%= link_to "Edit Goal", edit_goal_path(@goal), data: { turbo_method: "get" } %>
<%= link_to "Delete Goal", goal_path(@goal), data: { turbo_method: "delete", turbo_confirm: "Are You Sure?" } %>

<%= link_to "New Small Goal", new_goal_small_goal_path(@goal), class: "btn btn-primary" %>
<%= link_to "Back", goals_path, class: "btn btn-primary" %>

<script>
document.addEventListener('turbo:load', function() {
  // 'はい'ボタンの処理
  const confirmYesButton = document.getElementById('confirm-yes');
  if (confirmYesButton) {
    confirmYesButton.addEventListener('click', function() {
      const customConfirmElement = document.getElementById('custom-confirm');
      if (!customConfirmElement) {
        console.error('Element with id "custom-confirm" not found.');
        return;
      }
      const goalId = customConfirmElement.getAttribute('data-goal-id');
      const goalCompleteUrl = `/goals/${goalId}/complete`;

      fetch(goalCompleteUrl, {
        method: 'PUT',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        credentials: 'same-origin'
      })
      .then(response => {
        if (response.ok) {
          // ボタンを非表示にする
          confirmYesButton.style.display = 'none';
          confirmNoButton.style.display = 'none';

          // 達成メッセージを表示
          const successMessage = document.createElement('p');
          successMessage.textContent = 'このGoalは達成しました!';
          document.getElementById('goal-title').insertAdjacentElement('beforebegin', successMessage);

          window.location.href = '/dashboard'; // ダッシュボードにリダイレクト
        } else {
          throw new Error('サーバーからの応答がありません。');
        }
      })
      .catch(error => {
        alert('エラーが発生しました。' + error.toString());
      });
    });
  } else {
    console.error('confirm-yes ボタンが見つかりません。');
  }

  // 'いいえ'ボタンの処理
  const confirmNoButton = document.getElementById('confirm-no');
  if (confirmNoButton) {
    confirmNoButton.addEventListener('click', function() {
      document.getElementById('custom-confirm').style.display = 'none';
    });
  } else {
    console.error('confirm-no ボタンが見つかりません。');
  }
});
</script>